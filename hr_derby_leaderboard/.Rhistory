arrange(team_name, date, desc(daily_hr)) %>%
group_by(team_name, date) %>%
slice(1:5) %>%
summarise(top_5_daily_hr = sum(daily_hr), .groups = 'drop')
}
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)
library(DT)
library(httr)
library(jsonlite)
# Source the data_processing.R file
source("data_processing.R")
runApp('my_shiny_app')
runApp('my_shiny_app')
cumulative_hr_data <- reactive({
if (is.null(data())) return(NULL)
data() %>%
mutate(date = as.Date(date)) %>% # Ensure date is in Date format
group_by(team_name, date) %>%
summarise(daily_hr = n(), .groups = 'drop') %>%
arrange(team_name, date) %>%
group_by(team_name) %>%
mutate(cumulative_hr = cumsum(daily_hr)) %>%
ungroup()
})
cumulative_hr_data()
head(data)
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
str(data())
runApp('my_shiny_app')
View(drafted_players)
View(home_run_data)
View(leaders)
View(available_players_df)
View(available_players_with_hr)
View(draft_board)
View(home_run_data)
View(hr_last_two_weeks)
View(leaders)
View(leaders)
View(playerhrs)
View(recent_home_runs)
View(playerhrs)
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
View(leaders)
# Example drafted players data frame
drafted_players <- data.frame(
player_id = 1:28,
player_name = c("Kyle Tucker", "Marcell Ozuna", "José Ramírez", "Teoscar Hernández", "Adley Rutschman", "Josh Naylor", "Ty France",
"Shohei Ohtani", "Corey Seager", "Pete Alonso", "Cal Raleigh", "Elly De La Cruz", "Matt Olson", "Max Muncy",
"Aaron Judge", "Giancarlo Stanton", "Yordan Alvarez", "Adolis García", "Rafael Devers", "Freddie Freeman", "Fernando Tatis Jr.",
"Juan Soto", "Bryce Harper", "Gunnar Henderson", "Kyle Schwarber", "Christian Walker", "Brent Rooker", "Ryan McMahon"),
team_name = c("Jackson", "Jackson", "Jackson", "Jackson", "Jackson", "Jackson", "Jackson",
"Tyler", "Tyler", "Tyler", "Tyler", "Tyler", "Tyler", "Tyler",
"Derek", "Derek", "Derek", "Derek", "Derek", "Derek", "Derek",
"Jason", "Jason", "Jason", "Jason", "Jason", "Jason", "Jason")
)
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
runApp('my_shiny_app')
library(rsconnect)
deployApp()
getwd()
deployApp()
rsconnect::deployApp(appName = "hr_derby_leaderboard")
rsconnect::deployApp(appName = "hr_derby_2024")
shiny::runApp()
shiny::runapp()
shiny::RunApp(
shiny::RunApp()
)
shiny::RunApp()
shiny::runApp()
getwd()
setwd("/Users/jacksonroah/Developer/R/baseball/hr_derby_leaderboard/my_shiny_app")
rsconnect::deployApp()
getwd()
setwd("/Users/jacksonroah/Developer/R/baseball/investigations")
library(ggplot)
library(ggplot2)
library(dplyr)
data <- read.csv("~$NEW OPS.xlsx")
data <- read.csv("NEW OPS.csv")
data
View(data)
data <- read.csv("NEW OPS.csv")
data
data <- read.csv("LWTS.csv")
data
ggplot(data = data, aes(x = WAA, y = our.WAA)) + geom_scatter()
ggplot(data = data, aes(x = WAA, y = our.WAA)) + geom_point()
ggplot(data = data, aes(x = our.WAA, y = WAA)) + geom_point()
data <- read.csv("LWTS.csv")
ggplot(data = data, aes(x = our.WAA, y = WAA)) + geom_point()
ggplot(data = data, aes(x = diff, y = SB)) + geom_point()
ggplot(data = data, aes(x = SB, y = diff)) + geom_point()
ggplot(data = data, aes(x = our.WAA, y = WAA)) + geom_point()
library(geom_text_repel)
library(ggrepel)
ggplot(data = data, aes(x = our.WAA, y = WAA)) + geom_point() + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = "Name"), color = "red"
)
ggplot(data = data, aes(x = our.WAA, y = WAA)) + geom_point() + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = Name), color = "red"
)
qualified <- data |> filter(PA > 300)
gplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
qualified <- qualified |> mutate(adjOPS = (1.8*OBP + SLG -(.320*1.8 + .414) * .27 * PA ) )
qualified
View(qualified)
qualified <- qualified |> mutate(adjOPS = (1.8*OBP + SLG -(.320*1.8 + .414) * .027 * PA ) )
qualified <- qualified |> mutate(adjOPS = ((1.8*OBP + SLG -(.320*1.8 + .414)) *.027*PA ) )
ggplot(data = qualified, aes(x = adjOPS, y = WAA)) + geom_point()
# now from difference in actual WAR
ggplot(data = qualified, aes(x = SB, vs.actual.WAA)) + geom_point()
ggplot(data = qualified, aes(x = adjOPS, y = WAA)) + geom_point()
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
ggplot(data = qualified, aes(x = adjOPS, y = WAA)) + geom_point()
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
#residual plot
ggplot(data = qualified, aes(x = out.WAA, y = vs.actual.WAA)) + geom_point()
#residual plot
ggplot(data = qualified, aes(x = our.WAA, y = vs.actual.WAA)) + geom_point()
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = Rbat)) + geom_point()
ggplot(data = qualified, aes(x = adjOPS, y = WAA)) + geom_point()
#now this to Rbat?
ggplot(data = qualified, aes(x = adjOPS, y = Rbat)) + geom_point()
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = Rbat)) + geom_point()
#now this to Rbat?
ggplot(data = qualified, aes(x = adjOPS, y = Rbat)) + geom_point()
#residual plot
ggplot(data = qualified, aes(x = our.WAA, y = vs.actual.WAA)) + geom_point()
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = Rbat)) + geom_point()
# BAAAAAANG
linfit <- lm(Rbat ~ our.WAA, data = qualified)
linfit
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = Rbat)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red")
# now augment( linear regression, data we want to calc)
# finds the residuals for each team between our linear regression and expected values
residuals <- augment(linfit, data = qualified)
library(broom)
library(ggrepel)
# now augment( linear regression, data we want to calc)
# finds the residuals for each team between our linear regression and expected values
residuals <- augment(linfit, data = qualified)
qualified |> filter(Name = "League Avg")
qualified |> filter(Name == "League Avg")
qualified <- qualified |> filter(Name != "League Avg")
#residual plot
ggplot(data = qualified, aes(x = our.WAA, y = vs.actual.WAA)) + geom_point()
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = Rbat)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red")
# BAAAAAANG
linfit <- lm(Rbat ~ our.WAA, data = qualified)
linfit
library(broom)
library(ggrepel)
# now augment( linear regression, data we want to calc)
# finds the residuals for each team between our linear regression and expected values
residuals <- augment(linfit, data = qualified)
residuals
residuals
View(residuals)
base_plot <- ggplot(residuals, aes(x = RD, y = .resid)) +
geom_point(alpha = .3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("our WAA") + ylab("Residual")
base_plot
base_plot <- ggplot(residuals, aes(x = our.WAA, y = .resid)) +
geom_point(alpha = .3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("our WAA") + ylab("Residual")
base_plot
resid_summary <- residuals |>
summarize(
N = n(),
avg = mean(.resid),
RMSE = sqrt((mean(.resid^2)))
)
resid_summary
# pull the RMSE column out of the summary of RMSE
rmse <- resid_summary |>  pull(RMSE)
residuals |>
summarize(
N = n(),
within_one = sum(abs(.resid) < rmse),
within_two = sum(abs(.resid) < 2 * rmse)
) |>
mutate(
within_one_pct = within_one / N,
within_two_pct = within_two / N
)
linfit2 <- lm(Rbat ~ adjOPS, data = qualified)
# now augment( linear regression, data we want to calc)
# finds the residuals for each team between our linear regression and expected values
residuals2 <- augment(linfit2, data = qualified)
base_plot2 <- ggplot(residuals, aes(x = adjOPS, y = .resid)) +
geom_point(alpha = .3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("our WAA") + ylab("Residual")
base_plot2
# we can perform a root mean square error to find the avg size of errors
resid_summary2 <- residuals |>
summarize(
N = n(),
avg = mean(.resid),
RMSE = sqrt((mean(.resid^2)))
)
resid_summary2
# pull the RMSE column out of the summary of RMSE
rmse2 <- resid_summary2 |>  pull(RMSE)
# The RMSE is the avg error of the residuals ie the model
residuals2 |>
summarize(
N = n(),
within_one = sum(abs(.resid) < rmse),
within_two = sum(abs(.resid) < 2 * rmse)
) |>
mutate(
within_one_pct = within_one / N,
within_two_pct = within_two / N
)
residuals2 |>
summarize(
N = n(),
within_one = sum(abs(.resid) < rmse),
within_two = sum(abs(.resid) < 2 * rmse)
) |>
mutate(
within_one_pct = within_one / N,
within_two_pct = within_two / N
)
residuals
residuals |>
summarize(
N = n(),
within_one = sum(abs(.resid) < rmse),
within_two = sum(abs(.resid) < 2 * rmse)
) |>
mutate(
within_one_pct = within_one / N,
within_two_pct = within_two / N
)
residuals2 |>
summarize(
N = n(),
within_one = sum(abs(.resid) < rmse),
within_two = sum(abs(.resid) < 2 * rmse)
) |>
mutate(
within_one_pct = within_one / N,
within_two_pct = within_two / N
)
base_plot2 <- ggplot(residuals, aes(x = adjOPS, y = .resid)) +
geom_point(alpha = .3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("our WAA") + ylab("Residual")
#now this to Rbat?
ggplot(data = qualified, aes(x = adjOPS, y = Rbat)) + geom_point()
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = Rbat)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red")
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = Rbat)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = Name), color = "red"
)
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = Rbat)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = Name), color = "red"
)
data <- read.csv("LWTSpitchers.csv")
#all pitchers
ggplot(data = data, aes(x = our.WAA, y = WAA)) + geom_point() + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = Name), color = "red"
)
ggplot(data = data, aes(x = SB, y = diff)) + geom_point()
#qualified hitters PA > 300
avg(qualified$BF)
#qualified hitters PA > 300
mean(qualified$BF)
View(data)
#qualified hitters PA > 300
mean(data$BF)
#qualified hitters PA > 300
qualified <- data |> filter(BF > 150)
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
# now from difference in actual WAR
ggplot(data = qualified, aes(x = our.WAA, vs.actual.WAA)) + geom_point()
#residual plot
ggplot(data = qualified, aes(x = our.WAA, y = vs.actual.WAA)) + geom_point()
#residual plot
ggplot(data = qualified, aes(x = our.WAA, y = vs.actual.WAA)) + geom_point()
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = Name), color = "red"
)
# BAAAAAANG
linfit <- lm(Rbat ~ our.WAA, data = qualified)
# BAAAAAANG
linfit <- lm(WAA ~ our.WAA, data = qualified)
linfit
# now augment( linear regression, data we want to calc)
# finds the residuals for each team between our linear regression and expected values
residuals <- augment(linfit, data = qualified)
View(qualified)
data <- read.csv("LWTSpitchers.csv")
#all pitchers
ggplot(data = data, aes(x = our.WAA, y = WAA)) + geom_point() + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = Name), color = "red"
)
data <- read.csv("LWTSpitchers.csv")
#all pitchers
ggplot(data = data, aes(x = our.WAA, y = WAA)) + geom_point() + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = Name), color = "red"
)
#qualified hitters PA > 300
qualified <- data |> filter(BF > 150)
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
#qualified hitters PA > 300
qualified <- data |> filter(BF > 200)
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
# now from difference in actual WAR
ggplot(data = qualified, aes(x = our.WAA, vs.actual.WAA)) + geom_point()
#residual plot
ggplot(data = qualified, aes(x = our.WAA, y = vs.actual.WAA)) + geom_point()
# now from difference in actual WAR
ggplot(data = qualified, aes(x = our.WAA, WAR)) + geom_point()
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = Name), color = "red"
)
# BAAAAAANG
linfit <- lm(WAA ~ our.WAA, data = qualified)
linfit
# now augment( linear regression, data we want to calc)
# finds the residuals for each team between our linear regression and expected values
residuals <- augment(linfit, data = qualified)
base_plot <- ggplot(residuals, aes(x = our.WAA, y = .resid)) +
geom_point(alpha = .3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("our WAA") + ylab("Residual")
base_plot
# we can perform a root mean square error to find the avg size of errors
resid_summary <- residuals |>
summarize(
N = n(),
avg = mean(.resid),
RMSE = sqrt((mean(.resid^2)))
)
resid_summary
# pull the RMSE column out of the summary of RMSE
rmse <- resid_summary |>  pull(RMSE)
residuals |>
summarize(
N = n(),
within_one = sum(abs(.resid) < rmse),
within_two = sum(abs(.resid) < 2 * rmse)
) |>
mutate(
within_one_pct = within_one / N,
within_two_pct = within_two / N
)
# BAAAAAANG
linfit <- lm(WAR ~ our.WAA, data = qualified)
# now augment( linear regression, data we want to calc)
# finds the residuals for each team between our linear regression and expected values
residuals <- augment(linfit, data = qualified)
base_plot <- ggplot(residuals, aes(x = our.WAA, y = .resid)) +
geom_point(alpha = .3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("our WAA") + ylab("Residual")
base_plot
# we can perform a root mean square error to find the avg size of errors
resid_summary <- residuals |>
summarize(
N = n(),
avg = mean(.resid),
RMSE = sqrt((mean(.resid^2)))
)
resid_summary
# pull the RMSE column out of the summary of RMSE
rmse <- resid_summary |>  pull(RMSE)
residuals |>
summarize(
N = n(),
within_one = sum(abs(.resid) < rmse),
within_two = sum(abs(.resid) < 2 * rmse)
) |>
mutate(
within_one_pct = within_one / N,
within_two_pct = within_two / N
)
rmse
##
ggplot(data = qualified, aes(x = BA, y = WAR)) ++ geom_point()
##
ggplot(data = qualified, aes(x = BA, y = WAR)) + geom_point()
##
ggplot(data = qualified, aes(x = OPS, y = WAR)) + geom_point()
##
ggplot(data = qualified, aes(x = BA, y = WAR)) + geom_point()
library(ggplot2)
library(dplyr)
library(ggrepel)
data <- read.csv("LWTS.csv")
#all hitters
ggplot(data = data, aes(x = our.WAA, y = WAA)) + geom_point() + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = Name), color = "red"
)
ggplot(data = data, aes(x = SB, y = diff)) + geom_point()
#qualified hitters PA > 300
qualified <- data |> filter(PA > 300)
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
# now from difference in actual WAR
ggplot(data = qualified, aes(x = SB, vs.actual.WAA)) + geom_point()
#residual plot
ggplot(data = qualified, aes(x = our.WAA, y = vs.actual.WAA)) + geom_point()
#what about to rBat
ggplot(data = qualified, aes(x = our.WAA, y = Rbat)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") + geom_text_repel(
data = filter(data, our.WAA > 4),
aes(our.WAA, WAA, label = Name), color = "red"
)
# BAAAAAANG
linfit <- lm(Rbat ~ our.WAA, data = qualified)
library(broom)
library(ggrepel)
# now augment( linear regression, data we want to calc)
# finds the residuals for each team between our linear regression and expected values
residuals <- augment(linfit, data = qualified)
ggplot(data = qualified, aes(x = OPS, y = WAA)) + geom_point()
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
ggplot(data = qualified, aes(x = OPS, y = WAA)) + geom_point()
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
ggplot(data = qualified, aes(x = OPS, y = WAA)) + geom_point()
ggplot(data = qualified, aes(x = OPS, y = WAR)) + geom_point()
ggplot(data = qualified, aes(x = our.WAA, y = WAR)) + geom_point()
ggplot(data = qualified, aes(x = OPS, y = WAR)) + geom_point()
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
ml = lm(WAA~our.WAA, data = qualified)
# Extracting R-squared parameter from summary
summary(ml)$r.squared
ml = lm(Rbat~our.WAA, data = qualified)
# Extracting R-squared parameter from summary
summary(ml)$r.squared
ml = lm(WAA~OPS, data = qualified)
# Extracting R-squared parameter from summary
summary(ml)$r.squared
ml = lm(WAA~our.WAA, data = qualified)
# Extracting R-squared parameter from summary
summary(ml)$r.squared
# adjusting OBP weight from 1.58 to 1.8 to see if correlation is higher
qualified <- qualified |> mutate(adjOPS = ((1.8*OBP + SLG -(.320*1.8 + .414)) *.027* PA ) )
ml = lm(WAA~adjOPS, data = qualified)
# Extracting R-squared parameter from summary
summary(ml)$r.squared
ggplot(data = qualified, aes(x = OPS, y = Rbat)) + geom_point()
ggplot(data = qualified, aes(x = our.WAA, y = Rbat)) + geom_point()
OPS
our.WAA
WAA
ggplot(data = qualified, aes(x = our.WAA, y = WAA)) + geom_point()
